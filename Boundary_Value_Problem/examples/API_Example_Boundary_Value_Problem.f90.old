module API_Example_Boundary_Value_Problem

    use Boundary_value_problems 
    use Finite_differences

    implicit none
    
contains  
  


!*******************************************************************************************************************************************
! Linear_1D
!*******************************************************************************************************************************************  
subroutine Test_Linear_BVP1D

    integer, parameter :: N = 30 
    real :: x(0:N), U(0:N) 
    real :: x0 = -1 , xf = 1
    integer :: i
    real :: pi = 4 * atan(1.0)  

    x = [ (x0 + (xf-x0)*i/N, i=0, N) ]

    call Linear_Boundary_Value_Problem(  x_nodes = x, Order = 4, Differential_operator = L, Boundary_conditions = BCs, Solution = U )


    call scrmod('revers')       
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $ (1.-x^2) * y_{xx} - 2*x * y_x + n*(n+1) * y = 0 \quad ; \quad n = 3 $ ", 2)
    CALL TITLIN (" $ y(-1) = -1, \quad y(1) = 1 $  ", 4)
    call qplot(x, U, N+1)

contains 

!********* Differential operator *********
    real function L(x, y, yx, yxx) 
    
        real, intent(in) :: x, y, yx, yxx                 
        real, parameter :: n = 3.
           
        !Legendre differential equation
    
        L = (1. - x**2) * yxx - 2 * x * yx + n * (n + 1.) * y
           
    end function 
    
!********* Boundary conditions *********
    real function BCs(x, y, yx) 
    
        real, intent(in) :: x, y, yx            

        if (x==x0) then
            BCs = y + 1
        elseif (x==xf) then
            BCs = y - 1
        else 
            write(*,*) " Error BCs x=", x  
            write(*,*) " a, b=", x0, xf
            stop  
        endif            
                 
    end function  

end subroutine 

!*******************************************************************************************************************************************
! Linear_2D
!*******************************************************************************************************************************************
subroutine Test_Linear_BVP2D

    integer, parameter :: Nx = 30, Ny = 30
    real :: x(0:Nx), y(0:Ny), U(0:Nx, 0:Ny)
    integer :: i, j
    real :: a=0, b=1
    real :: pi = 4 * atan(1.0)

    x = [ (a + (b-a)*i/Nx, i=0, Nx) ]
    y = [ (a + (b-a)*j/Ny, j=0, Ny) ]
    U = 1      

    call Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, Order = 11,  & 
                                        Differential_operator = L, Boundary_conditions = BCs, Solution = U ) 
                          
   
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  u_{xx} + u_{yy}  = 50  \quad sin(2 \pi x) \quad sin( 2 \pi y )  $ ", 2)
    CALL TITLIN (" $ u(0,y) = 0, \quad u(1,y) = 0, \quad u_y(x,0) = 0, \quad u(x,1) = 0 $  ", 4)
    call qplcon( U, Nx+1, Ny+1, 20)

contains

!********* Function *********
    real function L(x, y, u, ux, uy, uxx, uyy, uxy)
    
        real, intent(in) :: x, y, u, ux, uy, uxx, uyy, uxy
        
        real :: PI = 4* atan(1d0) 
        
        L =  uxx + uyy - 50 * sin(2*PI*x) * sin(2*PI*y) 

    end function

!********* Boundary conditions *********
    real function BCs(x, y, u, ux, uy)
    
        real, intent(in) :: x, y, u, ux, uy

        if (x==a) then
            BCs = u
        elseif (x==b) then
            BCs = u 
        elseif (y==a) then
            BCs = u
        elseif (y==b) then
            BCs = u 
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " a, b=", a, b
            stop 
        endif

    end function

end subroutine 

!*******************************************************************************************************************************************
! system Linear_2D
!*******************************************************************************************************************************************
subroutine Test_Linear_system_BVP2D

    integer, parameter :: Nx = 20, Ny = 20, Nv = 2 
    real :: x(0:Nx), y(0:Ny), U(0:Nx, 0:Ny, Nv)
    integer :: i, j
    real :: a=0, b=1
    real :: PI = 4 * atan(1.0)

    x = [ (a + (b-a)*i/Nx, i=0, Nx) ]
    y = [ (a + (b-a)*j/Ny, j=0, Ny) ]
    U = 1      

    call Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, Order = 11, N_variables = 2, & 
                                        Differential_operator = L, Boundary_conditions = BCs, Solution = U ) 
                          
   
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  \nabla^4 u =   50  \quad sin(2 \pi x) \quad sin( 2 \pi y )  $ ", 2)
    CALL TITLIN (" $ u(0,y) = 0, \quad u(1,y) = 0, \quad u_y(x,0) = 0, \quad u(x,1) = 0 $  ", 4)
    call qplcon( U(:,:,1), Nx+1, Ny+1, 20)

contains

!********* Function *********
function L(x, y, u, ux, uy, uxx, uyy, uxy)
  real, intent(in) :: x, y, u(:), ux(:), uy(:), uxx(:), uyy(:), uxy(:)
  real :: L(size(u)) 
        
       real :: v, vxx, vyy, w, wxx, wyy
       
        v = u(1); vxx = uxx(1); vyy = uyy(1) 
        w = u(2); wxx = uxx(2); wyy = uyy(2)
        
       
        L(1) =  vxx +vyy - w   
        L(2) =  wxx + wyy - 50 * sin(2*PI*x) ! - 50 * sin(2*PI*x) * sin(2*PI*y)
        
end function

!********* Boundary conditions *********
function BCs(x, y, u, ux, uy)
    
        real, intent(in) :: x, y, u(:), ux(:), uy(:)
        real :: BCs(size(u))

        if (x==a) then
            BCs(1) = u(1)
            BCs(2) = u(2)
        elseif (x==b) then
             BCs(1) = u(1)
             BCs(2) = ux(2) ! u(2)   
        elseif (y==a) then
            BCs(1) = u(1)
            BCs(2) = u(2)
        elseif (y==b) then
            BCs(1) = u(1)
            BCs(2) = u(2)
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " a, b=", a, b
            stop 
        endif

    end function

end subroutine 



!*******************************************************************************************************************************************
! system Linear_2D
!*******************************************************************************************************************************************
subroutine Test_Non_Linear_system_BVP2D

    integer, parameter :: Nx = 20, Ny = 20, Nv = 2 
    real :: x(0:Nx), y(0:Ny), U(0:Nx, 0:Ny, Nv)
    integer :: i, j
    real :: a=0, b=1
    real :: PI = 4 * atan(1.0)

    x = [ (a + (b-a)*i/Nx, i=0, Nx) ]
    y = [ (a + (b-a)*j/Ny, j=0, Ny) ]
    U = 1      

    call Non_Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, Order = 11, N_variables = 2, & 
                                            Differential_operator = L, Boundary_conditions = BCs, Solution = U ) 
                          
   
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  \nabla^4 u =   50  \quad sin(2 \pi x) \quad sin( 2 \pi y )  $ ", 2)
    CALL TITLIN (" $ u(0,y) = 0, \quad u(1,y) = 0, \quad u_y(x,0) = 0, \quad u(x,1) = 0 $  ", 4)
    call qplcon( U(:,:,1), Nx+1, Ny+1, 20)

contains

!********* Function *********
function L(x, y, u, ux, uy, uxx, uyy, uxy)
  real, intent(in) :: x, y, u(:), ux(:), uy(:), uxx(:), uyy(:), uxy(:)
  real :: L(size(u)) 
        
       real :: v, vxx, vyy, w, wxx, wyy
       
        v = u(1); vxx = uxx(1); vyy = uyy(1) 
        w = u(2); wxx = uxx(2); wyy = uyy(2)
        
       
        L(1) =  vxx +vyy - w   
        L(2) =  wxx + wyy - 50 * sin(2*PI*x) * sin(2*PI*y)
        
end function

!********* Boundary conditions *********
function BCs(x, y, u, ux, uy)
    
        real, intent(in) :: x, y, u(:), ux(:), uy(:)
        real :: BCs(size(u))

        if (x==a) then
            BCs(1) = u(1)
            BCs(2) = u(2)
        elseif (x==b) then
             BCs(1) = u(1)
             BCs(2) = u(2)
        elseif (y==a) then
            BCs(1) = u(1)
            BCs(2) = u(2)
        elseif (y==b) then
            BCs(1) = u(1)
            BCs(2) = u(2)
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " a, b=", a, b
            stop 
        endif

    end function

end subroutine 






!*******************************************************************************************************************************************
! system Linear_3D
!*******************************************************************************************************************************************
subroutine Test_Linear_system_BVP3D

    integer, parameter :: Nx = 10, Ny = 10, Nz = 10,  Nv = 2 
    real :: x(0:Nx), y(0:Ny), z(0:Nz), U(0:Nx, 0:Ny, 0:Nz, Nv)
    integer :: i, j, k 
    real :: a=0, b=1
    real :: PI = 4 * atan(1.0)

    x = [ (a + (b-a)*i/Nx, i=0, Nx) ]
    y = [ (a + (b-a)*j/Ny, j=0, Ny) ]
    z = [ (a + (b-a)*k/Nz, k=0, Nz) ]
    U = 1      

    call Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, z_nodes = z, Order = 4, N_variables = 2, & 
                                        Differential_operator = L, Boundary_conditions = BCs, Solution = U ) 
                          
   
    write(*,*) " maxval U =", maxval( U(:,:,:,1) )     
    write(*,*) " minval U =", minval( U(:,:,:,1) ) 
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  \nabla^4 u =   50  \quad sin(2 \pi x) \quad sin( 2 \pi y ) \quad sin( 2 \pi z )  $ ", 2)
    CALL TITLIN (" $ u(0,y,z) = 0, \quad u(1,y,z) = 0, \quad u_y(x,0,z) = 0, \quad u(x,1,z) = 0 $  ", 4)
    
    call qplcon( U(:,:, 0, 1), Nx+1, Ny+1, 20)
    call qplcon( U(:,:, 2, 1), Nx+1, Ny+1, 20)
    call qplcon( U(:,:, Nz, 1), Nx+1, Ny+1, 20)
    

contains
  
!********* Function *********
function L(x, y, z, u, ux, uy, uz, uxx, uyy, uzz, uxy, uxz, uyz)
  real, intent(in) :: x, y, z, u(:), ux(:), uy(:), uz(:), uxx(:), uyy(:), uzz(:), uxy(:), uxz(:), uyz(:)
  real :: L(size(u)) 
        
       real :: v, vxx, vyy, vzz, w, wxx, wyy, wzz
       
        v = u(1); vxx = uxx(1); vyy = uyy(1); vzz = uzz(1)     
        w = u(2); wxx = uxx(2); wyy = uyy(2); wzz = uzz(2) 
        
       
        L(1) =  vxx + vyy  + vzz  -50 * sin(2*PI*x) * sin(2*PI*y)  * sin(2*PI*z) ! ! 
        L(2) =  wxx + wyy + wzz - 50 * sin(2*PI*x) * sin(2*PI*y) * sin(2*PI*z) 
        
end function   

!********* Boundary conditions *********
function BCs(x, y, z, u, ux, uy, uz)
    
        real, intent(in) :: x, y, z, u(:), ux(:), uy(:), uz(:) 
        real :: BCs(size(u))

        if (x==a) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            
        elseif (x==b) then
             BCs(1) = u(1)
             BCs(2) = u(2)
             
        elseif (y==a) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            
        elseif (y==b) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            
        elseif (z==a) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            
        elseif (z==b) then
            BCs(1) = u(1)
            BCs(2) = u(2)    
            
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " a, b=", a, b
            stop 
        endif

    end function

end subroutine 



!*******************************************************************************************************************************************
! Non_Linear_2D
!*******************************************************************************************************************************************
   

subroutine Test_Non_Linear_BVP2D

    integer, parameter :: Nx = 20, Ny = 20
    real :: x(0:Nx), y(0:Ny), U(0:Nx, 0:Ny)
    integer :: i, j
    real :: a=0, b=1
    real :: pi = 4 * atan(1.0)

    x = [ (a + (b-a)*i/Nx, i=0, Nx) ]
    y = [ (a + (b-a)*j/Ny, j=0, Ny) ]
    U = 1      

    call Non_Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, Order = 5,  & 
                                            Differential_operator = L, Boundary_conditions = BCs, Solution = U ) 
                          
   
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $ ( u_{xx} + u_{yy} ) u = 0  $ ", 2)
    CALL TITLIN (" $ u(0,y) = 0, \quad u(1,y) = y, \quad u_y(x,0) = 0, \quad u(x,1) = x $  ", 4)
    call QPLClr( U, Nx+1, Ny+1)
       
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $ ( u_{xx} + u_{yy} ) u = 0  $ ", 2)
    CALL TITLIN (" $ u(0,y) = 0, \quad u(1,y) = y, \quad u_y(x,0) = 0, \quad u(x,1) = x $  ", 4)
    call qplcon( U, Nx+1, Ny+1, 20)

contains

!********* Function *********

    real function L(x, y, u, ux, uy, uxx, uyy, uxy)
    
        real, intent(in) :: x, y, u, ux, uy, uxx, uyy, uxy

        L = ( uxx + uyy) * u

    end function

!********* Bounds *********

    real function BCs(x, y, u, ux, uy)
    
        real, intent(in) :: x, y, u, ux, uy

        if (x==a) then
            BCs = u
        elseif (x==b) then
            BCs = u - y
        elseif (y==a) then
            BCs = uy
        elseif (y==b) then
            BCs = u - x
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " a, b=", a, b
            stop 
        endif

    end function

end subroutine 









!*******************************************************************************************************************************************
! system Linear_3D
!*******************************************************************************************************************************************
subroutine Test_plate3D

    integer, parameter :: Nx = 15, Ny = 15, Nz = 15,  Nv = 3 
    real :: x(0:Nx), y(0:Ny), z(0:Nz), U(0:Nx, 0:Ny, 0:Nz, Nv)
    integer :: i, j, k 
    real :: x0, xf, y0, yf, z0, zf
    real :: Lx = 1.3, Ly = 3, Lz = 1.6d-2
    real :: E = 72d9 , poisson = 0.22 
    real :: mu, lambda
    real :: rho_water = 1000, p_atm = 101325 , g = 9.817
    real :: x_pillar = 0 , y_pillar = 0.50 , R_pillar = 20d-3 

!************* Uniform grid ********************************   
    x0 = -0.5*Lx ;  y0 = -0.5*Ly ; z0 = -0.5*Lz
    xf =  0.5*Lx ;  yf =  0.5*Ly ; zf =  0.5*Lz
    
    x = [ (x0 + (xf-x0)*i/Nx, i=0, Nx) ]
    y = [ (y0 + (yf-y0)*j/Ny, j=0, Ny) ]
    z = [ (z0 + (zf-z0)*k/Nz, k=0, Nz) ]

!***********************************************************    
    mu = 0.5 * E / (1+poisson) 
    lambda = E * poisson / ((1 - 2*poisson)*(1 + poisson))
    K = (mu + lambda)/mu  
    U = 1      

    call Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, z_nodes = z, Order = 3, N_variables = Nv, & 
                                        Differential_operator = L, Boundary_conditions = BCs, Solution = U ) 
                          
   
    write(*,*) " maxval U =", maxval( U(:,:,:,3) )     
    write(*,*) " minval U =", minval( U(:,:,:,3) ) 
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $    $ ", 2)
    CALL TITLIN (" $ u(0,y,z) = 0, \quad u(1,y,z) = 0, \quad u_y(x,0,z) = 0, \quad u(x,1,z) = 0 $  ", 4)
    
    call qplcon( U(:,:,  0, 3), Nx+1, Ny+1, 20)
    call qplcon( U(:,:,  Nz/2, 3), Nx+1, Ny+1, 20)
    call qplcon( U(:,:,  Nz, 3), Nx+1, Ny+1, 20)
    
    call qplcon( U(:, Ny/2,:,3), Nx+1, Nz +1,20)
    

contains
  
!********* Function *********
function L(x, y, z, u, ux, uy, uz, uxx, uyy, uzz, uxy, uxz, uyz)
  real, intent(in) :: x, y, z, u(:), ux(:), uy(:), uz(:), uxx(:), uyy(:), uzz(:), uxy(:), uxz(:), uyz(:)
  real :: L(size(u)) 
  real :: P, Pxx, Pyy, Pzz, Pxy, Pxz, Pyz
  real :: Q, Qxx, Qyy, Qzz, Qxy, Qxz, Qyz
  real :: R, Rxx, Ryy, Rzz, Rxy, Rxz, Ryz



    P = u(1)  ; Pxx = uxx(1); Pyy = uyy(1); Pzz = uzz(1)  
  Pxy = uxy(1); Pxz = uxz(1); Pyz = uyz(1)   
 
    Q = u(2)  ; Qxx = uxx(2); Qyy = uyy(2); Qzz = uzz(2)     
  Qxy = uxy(2); Qxz = uxz(2); Qyz = uyz(2)   

    R = u(3)  ; Rxx = uxx(3); Ryy = uyy(3); Rzz = uzz(3)     
  Rxy = uxy(3); Rxz = uxz(3); Ryz = uyz(3)   
 
        
  L(1) = ( Pxx + Pyy + Pzz ) + K*( Pxx + Qxy + Rxz ) 
  L(2) = ( Qxx + Qyy + Qzz ) + K*( Pxy + Qyy + Ryz ) 
  L(3) = ( Rxx + Ryy + Rzz ) + K*( Pxz + Qyz + Rzz ) 
        
end function   

!********* Boundary conditions *********
function BCs(x, y, z, u, ux, uy, uz)
    
        real, intent(in) :: x, y, z, u(:), ux(:), uy(:), uz(:) 
        real :: BCs(size(u))
!~         real :: pillar_region
        
!~   pillar_region = (x - x_pillar)**2 +(y - y_pillar)**2 - R_pillar**2

        if (x==x0) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            
        elseif (x==xf) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            
        elseif (y==y0) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            
        elseif (y==yf) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            
        elseif (z==z0) then
            BCs(1) = uz(1) + ux(3)
            BCs(2) = uz(2) + uy(3)
            BCs(3) = (lambda + 2*mu)* ux(1) + lambda*( uy(2) + uz(3) ) + p_atm
           
        elseif (z==zf) then
        
!~           if (pillar_region > 0) then
!~             BCs(1) = uz(1) + ux(3)
!~             BCs(2) = uz(2) + uy(3)
!~             BCs(3) = (lambda + 2*mu)* ux(1) + lambda*( uy(2) + uz(3) ) + p_atm - rho_water * g *y 
            
!~           else
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            
!~           endif 
                
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " x0, xf=", x0, xf
            stop 
        endif

    end function

end subroutine 








!*******************************************************************************************************************************************
! Pillars system Navier 2D
!*******************************************************************************************************************************************


subroutine Test_Pillars_Navier_system

    integer, parameter :: Nx = 36, Ny = 36, Nv = 2 
    real :: x(0:Nx), y(0:Ny), U(0:Nx, 0:Ny, Nv), Ux(0:Nx, 0:Ny, Nv)
    real :: Uy(0:Nx, 0:Ny, Nv), Uxx(0:Nx, 0:Ny, Nv), Uyy(0:Nx, 0:Ny, Nv)
    real :: Uxy(0:Nx, 0:Ny, Nv)
    real :: Mxx(0:Nx,0:Ny), Myy(0:Nx,0:Ny), Mxy(0:Nx,0:Ny)
    real :: thick = 16d-3, Lx = 1.3, Ly = 3
    real :: x0 , xf , y0 , yf
    integer :: i, j, i_pillar, j_pillar
    real :: E = 72d9 , poisson = 0.22 
    real :: mu, lambda, D
    real :: rho_water = 1000, p_atm = 101325 , g = 9.817
    real :: x_pillar, y_pillar, R_pillar
    real :: dmin 
    
    
    x0 = 0 ; xf =  Lx
    y0 = 0 ; yf =  Ly
    x_pillar = Lx/2 
    y_pillar = 2*Ly/3 
    dmin = max( Lx/Nx, Ly/Ny) 
    R_pillar = max( 0.2, dmin ) 
    
    
    !Malla equiespaciada
    
    x = [ (x0 + (xf-x0)*i/Nx, i=0, Nx) ]
    y = [ (y0 + (yf-y0)*j/Ny, j=0, Ny) ]

    mu= 0.5 * E / (1+poisson) 
    lambda = E * poisson / ((1 - 2*poisson)*(1 + poisson))
    D = E * (thick**3) / (12 * (1- poisson**2))
    U = 1      
	 
       
!    call Non_Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, Order = 5, N_variables = Nv, Differential_operator = L, Boundary_conditions = BCs, Solution = U )
    call Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, Order = 4, N_variables = Nv, Differential_operator = L, Boundary_conditions = BCs, Solution = U )
     
  call Check_grid( "x", x, 4, size( U(:,0,1) ) ) 
  call Check_grid( "y", y, 4, size( U(0,:,1) ) )
  
     do i=1, Nv 
        call Derivative( ["x","y"], 1, 1, U(0:,0:,i), Ux(0:,0:,i)  )
        call Derivative( ["x","y"], 1, 2, U(0:,0:,i), Uxx(0:,0:,i) )

        call Derivative( ["x","y"], 2, 1, U(0:,0:,i), Uy(0:,0:,i)  )
        call Derivative( ["x","y"], 2, 2, U(0:,0:,i), Uyy(0:,0:,i) )

        call Derivative( ["x","y"], 2, 1, Ux(0:,0:,i), Uxy(0:,0:,i))
     end do   

 Mxx = - D * (Uxx(:,:,1) + poisson * Uyy(:,:,1) )
 Myy = - D * (Uyy(:,:,1) + poisson * Uxx(:,:,1) )
 Mxy = - D * (1 - poisson) * Uxy(:,:,1)


!****************** Uz PLOTTING **********************		
    
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  Desplazamiento U_z (m) $ ", 2)
    call qplcon( U(:,:,1), Nx+1, Ny+1, 20)
    
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  Desplazamiento U_z (m) $ ", 2)
	CALL QPLCLR ( U(:,:,1), Nx+1, Ny+1)
	
!******************************************************	
!**************   Mxx  ********************************
	call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  M_{xx} $ ", 2)
	CALL qplcon ( Mxx(:,:), Nx+1, Ny+1, 20)
	
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $ M_{xx} $ ", 2)
	CALL QPLCLR ( Mxx(:,:), Nx+1, Ny+1)

!******************************************************	
!**************   Myy  ********************************	
	
	call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  M_{yy} $ ", 2)
	CALL qplcon ( Myy(:,:), Nx+1, Ny+1, 20)

    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $ M_{yy} $ ", 2)
	CALL QPLCLR ( Myy(:,:), Nx+1, Ny+1)
!******************************************************	
!**************   Mxy  ********************************
call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  M_{xy} $ ", 2)
	CALL qplcon ( Mxy(:,:), Nx+1, Ny+1, 20)

    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $ M_{xy} $ ", 2)
	CALL QPLCLR ( Mxy(:,:), Nx+1, Ny+1)

contains

!********* Function *********
function L(x, y, u, ux, uy, uxx, uyy, uxy)
  real, intent(in) :: x, y, u(:), ux(:), uy(:), uxx(:), uyy(:), uxy(:)
  real :: L(size(u)) 
  real :: v, vxx, vyy, vxy, w, wxx, wyy, Mxx, Myy, Mxy
  real :: pillar_region , q
    
  pillar_region = (x - x_pillar)**2 +(y - y_pillar)**2 - R_pillar**2
  q = ( - rho_water * g * (y - y0))  
       
        v = u(1); vxx = uxx(1); vyy = uyy(1) ; vxy = uxy(1)
        w = u(2); wxx = uxx(2); wyy = uyy(2) 
       
    if (pillar_region > 0) then   
        L(1) =  vxx +vyy - w   
        L(2) =  wxx + wyy - q / D
       
     else
        L(1) = vxx +vyy - w 
        L(2) = v 
      
    endif  
end function


        
!********* Boundary conditions *********
!Simply supported plate Mij = 0 <=> nabla **2 U_z = 0
function BCs(x, y, u, ux, uy)

    
        real, intent(in) :: x, y, u(:), ux(:), uy(:)
        real :: BCs(size(u))

        if (x==x0) then
            BCs(1) = u(1)
            BCs(2) = u(2)
            
        elseif (x==xf) then
            BCs(1) = u(1)
            BCs(2) = u(2)

        elseif (y==y0) then
            BCs(1) = u(1)
            BCs(2) = u(2)
      
        elseif (y==yf) then
            BCs(1) = u(1)
            BCs(2) = u(2)
     
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " x0, xf=", x0, xf
            write(*,*) " y0, yf=", y0, yf

            stop 
        endif

    end function

end subroutine 




!*******************************************************************************************************************************************
! Pillars Non Linear system Navier 2D
!*******************************************************************************************************************************************


subroutine Test_Pillars_Non_Linear_Navier_system

    integer, parameter :: Nx = 10, Ny = 30, Nv = 4
    real :: x(0:Nx), y(0:Ny), U(0:Nx, 0:Ny, Nv)
    real :: thick = 16d-3, Lx = 1.3, Ly = 3
    real :: x0 , xf , y0 , yf 
    integer :: i, j, i_pillar, j_pillar 
    integer, parameter :: Order = 4
    real :: E = 72d9 , poisson = 0.22 
    real :: mu, lambda, D
    real :: rho_water = 1000, p_atm = 101325 , g = 9.817
    real :: x_pillar, y_pillar, R_pillar
    real :: dmin 
    
    
    x0 = 0 ; xf =  Lx
    y0 = 0 ; yf =  Ly
    x_pillar = Lx/2 
    y_pillar = 2*Ly/3 
    dmin = max( Lx/Nx, Ly/Ny) 
    R_pillar = max( 0.2, dmin ) 
    
    
    !Malla equiespaciada
    
    x = [ (x0 + (xf-x0)*i/Nx, i=0, Nx) ]
    y = [ (y0 + (yf-y0)*j/Ny, j=0, Ny) ]

    mu= 0.5 * E / (1+poisson) 
    lambda = E * poisson / ((1 - 2*poisson)*(1 + poisson))
    D = E * (thick**3) / (12 * (1- poisson**2))
    U = 1      
	 
       
    call Non_Linear_Boundary_Value_Problem( x_nodes = x, y_nodes = y, Order = Order, N_variables = Nv, Differential_operator = L, Boundary_conditions = BCs, Solution = U )
     
  !call Check_grid( "x", x, Order, size( U(:,0,1) ) ) 
  !call Check_grid( "y", y, Order, size( U(0,:,1) ) )
  !
  !   do i=1, Nv 
  !      call Derivative( ["x","y"], 1, 1, U(0:,0:,i), Ux(0:,0:,i)  )
  !      call Derivative( ["x","y"], 1, 2, U(0:,0:,i), Uxx(0:,0:,i) )
  !
  !      call Derivative( ["x","y"], 2, 1, U(0:,0:,i), Uy(0:,0:,i)  )
  !      call Derivative( ["x","y"], 2, 2, U(0:,0:,i), Uyy(0:,0:,i) )
  !
  !      call Derivative( ["x","y"], 2, 1, Ux(0:,0:,i), Uxy(0:,0:,i))
  !   end do   

 

!****************** Uz PLOTTING **********************		
    
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  Desplazamiento U_z (m) $ ", 2)
    call qplcon( U(:,:,1), Nx+1, Ny+1, 20)
    
    call scrmod('revers')
    call metafl('xwin')
    call disini() 
    CALL TEXMOD('ON')
    CALL TITLIN (" $  Desplazamiento U_z (m) $ ", 2)
	CALL QPLCLR ( U(:,:,1), Nx+1, Ny+1)
	

contains

!********* Function *********
function L(x, y, u, ux, uy, uxx, uyy, uxy)
  real, intent(in) :: x, y, u(:), ux(:), uy(:), uxx(:), uyy(:), uxy(:)
  real :: L(size(u)) 
  real :: v, vxx, vyy, vxy, w, wxx, wyy
  real :: phi, phixx, phiyy, phixy, F, Fxx, Fyy 
  real :: pillar_region , q
    
  pillar_region = (x - x_pillar)**2 +(y - y_pillar)**2 - R_pillar**2
  q = ( - rho_water * g * (y - y0))  
       
        v = u(1);   vxx = uxx(1);   vyy = uyy(1) ; vxy = uxy(1)
        w = u(2);   wxx = uxx(2);   wyy = uyy(2) 
      phi = u(3); phixx = uxx(3); phiyy = uyy(3) ; phixy = uxy(3)
        F = u(4);   Fxx = uxx(4);   Fyy = uyy(4) 
    if (pillar_region > 0) then   
        L(1) =  vxx +vyy - w   
        L(2) =  wxx + wyy - q / D + (thick/D) * ( phiyy*vxx + phixx*vyy - 2* phixy * vxy )
        L(3) =  phixx + phiyy - F
        L(4) =  Fxx + Fyy  + (E/2) * ( vyy*vxx + vxx*vyy - 2* vxy * vxy )
        
        
     else
        L(1) = vxx +vyy - w 
        L(2) = v 
        L(3) =  phixx + phiyy - F
        L(4) =  Fxx + Fyy  + (E/2) * ( vyy*vxx + vxx*vyy - 2* vxy * vxy )        
      
    endif  
end function


        
!********* Boundary conditions *********
!Simply supported plate Mij = 0 <=> nabla **2 U_z = 0
function BCs(x, y, u, ux, uy)

    
        real, intent(in) :: x, y, u(:), ux(:), uy(:)
        real :: BCs(size(u))

        if (x==x0) then
            
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            BCs(4) = u(4)
            
        elseif (x==xf) then
            
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            BCs(4) = u(4)
            
        elseif (y==y0) then
            
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            BCs(4) = u(4)
        elseif (y==yf) then
            
            BCs(1) = u(1)
            BCs(2) = u(2)
            BCs(3) = u(3)
            BCs(4) = u(4)
        else
            write(*,*) " Error BCs x=", x
            write(*,*) " x0, xf=", x0, xf
            write(*,*) " y0, yf=", y0, yf

            stop 
        endif

    end function

end subroutine 






end module
